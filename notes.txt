create 1 CalcController that will open InputNum.jsp 
		this jsp having 1 form with 
				two text box that will read number 
				and 
				one submit button 
		
----------------------------------------------------------------

validation ->
				1) lib -> jar -> dep ->	
						
				2) ProductBean=>	@NotBlank
				
				3) in controller we have to use @Validated and BindingResult 
				
----------------------------------------------------------------
data base 
		1) driver  mysql-driver 				
		   spring-data-jdbc 	
		   
	     2)
	     	configure application.properties 
	     		url
	     		username
	     		password
	 -----------------------------------------   
	    3)  JdbcTemplate -> object 
				@Autowired
				JdbcTemplate stmt; 
				
				
				
singleton design pattern -> 
	
@Autowire -> it will create instance -> spring -> 1 time 
----------------------------------------------------------------
JdbcTemplate -> query -> 
	    
	    insert : update() 
	    update : update()
	    delete : update()
	    select : query()   -> n number of records.
	    select : queryForObject()   -> single record : exactly one  

----------------------------------------------------------------
	    
	    Course -> courses 
	    				courseId
	    				courseName
	    				description 
	    				price 
	    				
	    
	   1) table : courses 
	   2) CourseBean
	   3) CourseController 
	   				@Getmapping ->jsp -> form -> input 
	   				@Postmapping -> read , validate , insert db 
	   
----------------------------------------------------------------
	    
	CRUD 
	    Laptop : table 
	    	laptop 
	    		laptopId
	    		modelName
	    		price 
	    		ram 
	    		ssd
	    		 
	    1) create table 
	    	create table laptop
	    	(
	    		laptopId int primary key auto_increment,
	    		modelName varchar(20),
	    		price float,
	    		ram varchar(20),
	    		ssd varchar(20)
	    	);
	    
	    
	    2) bean -> LaptopBean
	    
	    3) controller -> 
						@get -> jsp open input -> submit 
						@post -> read validate db insert 
						
---------------------------


JSTL ->java standard tag library 
	try
	forEach
				1)	lib / dep / jar 
					pom.xml 
						<dependency>
							<groupId>org.glassfish.web</groupId>
							<artifactId>jakarta.servlet.jsp.jstl</artifactId>
						</dependency>

						<dependency>
							<groupId>jakarta.servlet.jsp.jstl</groupId>
							<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
						</dependency>	
								
				2)
	    			jsp tag -> import -> taglib 
	    			 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	    			
	    
	    
---------------------------
	    
	InputDelete.jsp 
		LaptopId : 17 
			submit 
			
	controller -> 17 delete 
---------------------------
	TV -> insert , list , delete 
	tvId 
	modelName
	price
	qty
	brand
	inch 
-------------------------------------------------

JdbcTemplate => 
				    
	update() => insert , update , delete 
	query() => select 
	queryForObject()  => select { single record -- exactly one  }  	    
	    

	select * from users ; 
	userId firstaName email password 
	1
	2
	3
	4
	5
	
	users -> table -> 1 record -> UserBean {userId,firstName,email,password}-> 5 	 
								List<UserBean>
								
			BeanPropertyRowMapper -> 
								
								
		BeanPropertyRowMapper map = new BeanPropertyRowMapper(UserBean.class);						
	List<UserBean> list =  	stmt.query("select * from users",map);	
		
	List<UserBean> list =	stmt.query("select * from users",new BeanPropertyRowMapper(UserBean.class));						
						
List<UserBean> list = stmt.query("select * from users where firstName like ? ",new BeanPropertyRowMapper(UserBean.class),firstName);						
								
List<UserBean> list = stmt.query("select * from users where firstName like ? ",new BeanPropertyRowMapper(UserBean.class),new Object[]{ firstName  } );						
								
------------------------------------------------------------------------------------------------------
	    
FoodItem
	pk : id 
	name 
	price
	qty 
	
	
	create table food_item (
		foodItemId int primary key auto_increment,
		name varchar(20),
		price int,
		qty int
		);
		
		
FoodItemBean   
	   
--------------------------------------------------------------------------

password -> encrypt -> db store -> 

kungfu --> db 


kungfu ->  ngret5y4jendfbvhydeg4g5htjrfnbv ->	    
	    
Bcrypt -> algo ->

spring crypto -> maven web site -> 	
	

1) add spring crypto lib from maven to pom.xml 
2)  create object of Bcrypt Password Encoder 
3)  use encode() to encrypt the password 

2) Application.java -> method -> return type PasswordEncoder @Bean 
----------------------------------------------------------------------------
signup ->
		firstname
		lastname 
		email	 	   
		password 
					[submit] 
					
	 
server -> request -> read , validation, {password : encode } -> db store -> login
	password -> plain text 
	
	db -> password -> encrypted ----> 
	
	bcrypt -> 
	
	
1) pom.xml -> spring crypto  {mvnrepository}
2) Application -> create method with return type 
			PasswordEncoder - return bcrypt 
			@Bean 
			 
3) use encode() 

-------------------------------------------------------------------------------
	   file uploading 
	   		image 
	   		video
	   		audio 
	   		any kind of file 
	   		
	   		
	   1) form -> input type="file" name="profilePic" 
	   
	   2) form method => post [mandatory]
	      form enctype => multipart/form-data 	
	    
	   3) file read
	   		MultipartFile : Bean 
	   		
	   4) upload file to cloud 
	   		cloudinary ->
	   		
	   				0) signup and login to the cloudinary and get 
	   						cloudName , folderName, key and secret 
	   						 	
	   				1) pom.xml dep -> cloudinary-http44
	   				
	   				2) @Bean -> and create cloudinary object 
	   				
	   				3) @Autowired 
	   					Cloudinary cloudinary
	   					
	   				4) method -> use  		
	   		    
	    
	    
-------------------------------------------------------------------------------

	list employee -> 
	
	name	pic 
		    
-------------------------------------------------------------------------------
SMTP server 

	gmail 
	yahoo 
	mailgun 
			    
-------------------------------------------------------------------------------
spring + mail + gmail  

	1) 	    add dep 
				java mail 
				
	2) 		gmail configure
			application.properties 
			
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    